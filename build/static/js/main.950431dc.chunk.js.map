{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","changedPerson","put","Person","person","handleClick","name","number","onClick","Persons","personsToShow","map","i","key","Filter","filterName","handleChange","type","value","onChange","Notification","message","classed","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setFilterName","notification","setNotification","notificationClass","setNotificationClass","useEffect","communicator","personnel","filter","toLowerCase","includes","event","target","onSubmit","preventDefault","find","window","confirm","noteObject","catch","error","p","setTimeout","returnedPerson","concat","console","log","ReactDOM","render","document","getElementById"],"mappings":"+OACMA,EAAU,eAsBD,EApBG,WAEd,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAACG,GAEZ,OADgBP,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALF,SAACG,EAAIE,GAEd,OADgBT,IAAMU,IAAN,UAAaX,EAAb,YAAwBQ,GAAME,GAC/BP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SChBvCO,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAX,OACb,6BAAMD,EAAOE,KAAb,IAAoBF,EAAOG,OAA3B,IAAoC,4BAAQC,QAASH,EAAYD,EAAOL,KAApC,UAApC,OAIIU,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeL,EAAlB,EAAkBA,YAAlB,OACdK,EAAcC,KAAI,SAACP,EAAQQ,GAAT,OAClB,yBAAKC,IAAKT,EAAOE,MACf,kBAAC,EAAD,CAAQF,OAAQA,EAAQC,YAAaA,SAKnCS,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,aAAf,OACb,kDACoB,2BAAOC,KAAK,OAAOC,MAAOH,EAAYI,SAAUH,MAIhEI,EAAe,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAE/B,OAAgB,OAAZD,GAAgC,OAAZC,EACf,KAIP,yBAAKC,UAAWD,GACbD,IAiIQG,EA3HH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,OAEgBF,mBAAS,IAFzB,mBAERG,EAFQ,KAECC,EAFD,OAGoBJ,mBAAS,IAH7B,mBAGRK,EAHQ,KAGGC,EAHH,OAIqBN,mBAAS,IAJ9B,mBAIRV,EAJQ,KAIIiB,EAJJ,OAK0BP,mBAAS,MALnC,mBAKRQ,EALQ,KAKMC,EALN,OAMoCT,mBAAS,MAN7C,mBAMRU,EANQ,KAMWC,EANX,KAQhBC,qBAAU,WACRC,IAEK5C,MAAK,SAAA6C,GACJZ,EAAWY,QAEhB,IAEH,IA8EM7B,EAA+B,KAAfK,EACpBW,EACAA,EAAQc,QAAO,SAAApC,GAAM,OAAKA,EAAOE,KAAKmC,cAAeC,SAAS3B,EAAW0B,kBAE3E,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcpB,QAASY,EAAcX,QAASa,IAC9C,kBAAC,EAAD,CAAQpB,WAAYA,EAAYC,aAAc,SAAC2B,GAAD,OAAWX,EAAcW,EAAMC,OAAO1B,UACpF,yCACA,0BAAM2B,SAxFM,SAAAF,GAGd,GAFAA,EAAMG,iBAEFpB,EAAQqB,MAAK,SAAA3C,GAAM,OAAIA,EAAOE,OAASsB,KAAU,CAEnD,IAAMxB,EAASsB,EAAQqB,MAAK,SAAA3C,GAAM,OAAIA,EAAOE,OAASsB,KAEtD,GAAIoB,OAAOC,QAAP,UAAkBrB,EAAlB,4EAAqG,CAEvG,IAAMsB,EAAa,CACjB5C,KAAMsB,EACNrB,OAAQuB,GAGVQ,EACQlC,EAAOL,GAAImD,GACdxD,MAAK,SAAAC,GACJgC,EAAWD,EAAQf,KAAI,SAAA4B,GAAS,OAAIA,EAAUjC,OAASsB,EAAUW,EAAY5C,KAC7EuC,EAAgB,WAAD,OAAYN,IAC3BQ,EAAqB,YACpBe,OAAM,SAAAC,GACPlB,EAAgB,kBAAD,OAAmBN,EAAnB,uCACfQ,EAAqB,OACrBT,EAAWD,EAAQc,QAAO,SAAAa,GAAC,OAAIA,EAAEtD,KAAOK,EAAOL,UAGjDuD,YAAW,WACTpB,EAAgB,MAChBE,EAAqB,QACpB,UAEJ,CAKLE,EAJmB,CACjBhC,KAAMsB,EACNrB,OAAQuB,IAILpC,MAAK,SAAA6D,GACJ5B,EAAWD,EAAQ8B,OAAOD,IAC1BrB,EAAgB,SAAD,OAAUN,IACzBQ,EAAqB,WAExBe,OAAM,SAAAC,GACLlB,EAAiBkB,EAAMzD,SAASC,KAAKwD,OACrChB,EAAqB,OACrBqB,QAAQC,IAAIN,EAAMzD,SAASC,SAG/B0D,YAAW,WACTpB,EAAgB,MAChBE,EAAqB,QACpB,QAqCD,sCACQ,2BAAOlB,MAAOU,EAAST,SAAU,SAACwB,GAAD,OAAWd,EAAWc,EAAMC,OAAO1B,WAE5E,wCACU,2BAAOA,MAAOY,EAAWX,SAAU,SAACwB,GAAD,OAAWZ,EAAaY,EAAMC,OAAO1B,WAElF,6BACE,4BAAQD,KAAK,UAAb,SAGJ,uCAEA,kBAAC,EAAD,CAASP,cAAeA,EAAeL,YA7CtB,SAACN,GAAD,OAAQ,WAC3B,IAAMK,EAASsB,EAAQqB,MAAK,SAAA3C,GAAM,OAAIA,EAAOL,KAAOA,KAEhDiD,OAAOC,QAAP,0CAAkD7C,EAAOE,KAAzD,QAEFgC,EACUvC,GACLL,MAAK,SAAA6D,GACJ5B,EAAWD,EAAQc,QAAO,SAAAD,GAAS,OAAIA,EAAUxC,KAAOA,SAG9DmC,EAAgB,WAAD,OAAY9B,EAAOE,OAClC8B,EAAqB,QAErBkB,YAAW,WACTpB,EAAgB,MAChBE,EAAqB,QACpB,YCzHTuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.950431dc.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getPeople = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst edit = (id, changedPerson) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, changedPerson)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getPeople, create, remove, edit }","import React, { useState, useEffect } from 'react'\r\nimport communicator from './services/persons'\r\nimport './index.css'\r\n\r\nconst Person = ( {person, handleClick} ) => (\r\n  <div>{person.name} {person.number} {<button onClick={handleClick(person.id)}>delete</button>} </div>\r\n  )\r\n\r\n\r\nconst Persons = ( {personsToShow, handleClick} ) => (\r\n  personsToShow.map((person, i) =>\r\n  <div key={person.name}>\r\n    <Person person={person} handleClick={handleClick} /> \r\n  </div>\r\n  )\r\n)\r\n\r\nconst Filter = ( {filterName, handleChange}) => (\r\n  <div>\r\n    filter shown with <input type=\"text\" value={filterName} onChange={handleChange} />\r\n  </div>\r\n)\r\n\r\nconst Notification = ({ message, classed }) => {\r\n\r\n  if (message === null || classed === null) {\r\n    return null\r\n  }\r\n  \r\n  return (\r\n    <div className={classed}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filterName, setFilterName] = useState('')\r\n  const [ notification, setNotification ] = useState(null)\r\n  const [ notificationClass, setNotificationClass ] = useState(null)\r\n \r\n  useEffect(() => {\r\n    communicator\r\n      .getPeople()\r\n        .then(personnel => {\r\n          setPersons(personnel)\r\n      })\r\n  }, [])\r\n\r\n  const addNote = event => {\r\n    event.preventDefault()\r\n    \r\n    if (persons.find(person => person.name === newName)) {\r\n      \r\n      const person = persons.find(person => person.name === newName)\r\n      \r\n      if (window.confirm(`${newName} is already added to phonebook. Do you want to update the phone number?`)) {\r\n        \r\n        const noteObject = {\r\n          name: newName,\r\n          number: newNumber\r\n        }\r\n\r\n        communicator\r\n          .edit(person.id, noteObject)\r\n            .then(response => {\r\n              setPersons(persons.map(personnel => personnel.name !== newName ? personnel : response),\r\n              setNotification(`Updated ${newName}`),\r\n              setNotificationClass(\"good\"))\r\n            }).catch(error => {\r\n              setNotification(`Information of ${newName} had been removed from the server!`)\r\n              setNotificationClass(\"bad\")\r\n              setPersons(persons.filter(p => p.id !== person.id))\r\n              })\r\n\r\n            setTimeout(() => {\r\n              setNotification(null)\r\n              setNotificationClass(null)\r\n            }, 5000)\r\n      }\r\n    } else {\r\n      const noteObject = {\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n      communicator \r\n        .create(noteObject)\r\n          .then(returnedPerson => {\r\n            setPersons(persons.concat(returnedPerson))\r\n            setNotification(`Added ${newName}`)\r\n            setNotificationClass(\"good\")\r\n        })\r\n        .catch(error => {\r\n          setNotification((error.response.data.error))\r\n          setNotificationClass(\"bad\")\r\n          console.log(error.response.data)\r\n        })\r\n\r\n      setTimeout(() => {\r\n        setNotification(null)\r\n        setNotificationClass(null)\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  const removePerson = (id) => () => {\r\n    const person = persons.find(person => person.id === id)\r\n\r\n    if (window.confirm(`Are you sure you want to delete ${person.name}?`)) {\r\n\r\n      communicator\r\n        .remove(id)\r\n          .then(returnedPerson => {\r\n            setPersons(persons.filter(personnel => personnel.id !== id))\r\n          })\r\n\r\n      setNotification(`Deleted ${person.name}`)\r\n      setNotificationClass(\"good\")\r\n\r\n      setTimeout(() => {\r\n        setNotification(null)\r\n        setNotificationClass(null)\r\n      }, 5000)\r\n\r\n    }\r\n  }\r\n\r\n  const personsToShow = filterName === ''\r\n  ? persons\r\n  : persons.filter(person => (person.name.toLowerCase()).includes(filterName.toLowerCase()))\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={notification} classed={notificationClass}/>\r\n      <Filter filterName={filterName} handleChange={(event) => setFilterName(event.target.value)} />\r\n      <h2>add a new</h2>\r\n      <form onSubmit={addNote}>\r\n        <div>\r\n          name: <input value={newName} onChange={(event) => setNewName(event.target.value)}/>\r\n        </div>\r\n        <div> \r\n          number: <input value={newNumber} onChange={(event) => setNewNumber(event.target.value)} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n      <h3>Numbers</h3>\r\n\r\n      <Persons personsToShow={personsToShow} handleClick={removePerson} />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}